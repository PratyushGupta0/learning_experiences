[  0%] Built target mav_planning_msgs_generate_messages_nodejs
[  0%] Built target sensor_msgs_generate_messages_py
[  0%] Built target mav_planning_msgs_generate_messages_cpp
[  0%] Built target std_srvs_generate_messages_lisp
[  0%] Built target trajectory_msgs_generate_messages_eus
[  0%] Built target rosgraph_msgs_generate_messages_py
[  0%] Built target std_srvs_generate_messages_nodejs
[  0%] Built target std_srvs_generate_messages_cpp
[  0%] Built target mav_planning_msgs_generate_messages_lisp
[  0%] Built target visualization_msgs_generate_messages_py
[  0%] Built target sensor_msgs_generate_messages_cpp
[  0%] Built target visualization_msgs_generate_messages_cpp
[  0%] Built target visualization_msgs_generate_messages_eus
[  0%] Built target std_srvs_generate_messages_py
[  0%] Built target rosgraph_msgs_generate_messages_nodejs
[  0%] Built target mav_planning_msgs_generate_messages_py
[  0%] Built target std_msgs_generate_messages_py
[  0%] Built target trajectory_msgs_generate_messages_py
[  0%] Built target rosgraph_msgs_generate_messages_eus
[  0%] Built target std_msgs_generate_messages_eus
[  0%] Built target rosgraph_msgs_generate_messages_lisp
[  0%] Built target mav_planning_msgs_generate_messages_eus
[  0%] Built target roscpp_generate_messages_nodejs
[  0%] Built target rosgraph_msgs_generate_messages_cpp
[  0%] Built target mav_msgs_generate_messages_py
[  0%] Built target sensor_msgs_generate_messages_eus
[  0%] Built target roscpp_generate_messages_eus
[  0%] Built target sensor_msgs_generate_messages_nodejs
[  0%] Built target geometry_msgs_generate_messages_eus
[  0%] Built target roscpp_generate_messages_cpp
[  0%] Built target roscpp_generate_messages_lisp
[  0%] Built target mav_msgs_generate_messages_lisp
[  0%] Built target visualization_msgs_generate_messages_nodejs
[  0%] Built target trajectory_msgs_generate_messages_lisp
[  0%] Built target visualization_msgs_generate_messages_lisp
[  0%] Built target std_msgs_generate_messages_nodejs
[  0%] Built target std_msgs_generate_messages_cpp
[  0%] Built target geometry_msgs_generate_messages_nodejs
[  0%] Built target sensor_msgs_generate_messages_lisp
[  0%] Built target mav_msgs_generate_messages_nodejs
[  0%] Built target std_msgs_generate_messages_lisp
[  0%] Built target mav_msgs_generate_messages_eus
[  0%] Built target std_srvs_generate_messages_eus
[  0%] Built target mav_msgs_generate_messages_cpp
[  0%] Built target trajectory_msgs_generate_messages_nodejs
[  0%] Built target geometry_msgs_generate_messages_lisp
[  0%] Built target geometry_msgs_generate_messages_cpp
[  0%] Built target geometry_msgs_generate_messages_py
[  0%] Built target trajectory_msgs_generate_messages_cpp
[  0%] Built target roscpp_generate_messages_py
[35m[1mScanning dependencies of target trajectory_generation[0m
[ 25%] [32mBuilding CXX object CMakeFiles/trajectory_generation.dir/src/dubins_trajectory.cpp.o[0m
[01m[K/home/pratyush/suas_ws/src/SUAS2022/suas_trajectory_estimation/trajectory_generation/src/dubins_trajectory.cpp:[m[K In member function â€˜[01m[Kvoid ariitk::trajectory_generation::DubinsTrajectory::loadParams(ros::NodeHandle&)[m[Kâ€™:
[01m[K/home/pratyush/suas_ws/src/SUAS2022/suas_trajectory_estimation/trajectory_generation/src/dubins_trajectory.cpp:21:51:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kros::NodeHandle::getParam(const char [6], Eigen::DenseCoeffsBase<Eigen::Matrix<double, 3, 1>, 1>::Scalar&, double)[m[Kâ€™
     nh_private.getParam("x_way", end_pos_.x(), 0.0[01;31m[K)[m[K;
                                                   [01;31m[K^[m[K
In file included from [01m[K/opt/ros/melodic/include/ros/ros.h:45:0[m[K,
                 from [01m[K/home/pratyush/Desktop/traj_gen/src/mav_comm/mav_msgs/include/mav_msgs/conversions.h:32[m[K,
                 from [01m[K/home/pratyush/suas_ws/src/SUAS2022/suas_trajectory_estimation/trajectory_generation/include/trajectory_generation/dubins_trajectory.hpp:6[m[K,
                 from [01m[K/home/pratyush/suas_ws/src/SUAS2022/suas_trajectory_estimation/trajectory_generation/src/dubins_trajectory.cpp:1[m[K:
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1672:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::__cxx11::string&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::string& s) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1672:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1683:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, double&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, double& d) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1683:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1694:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, float&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, float& f) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1694:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1705:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, int&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, int& i) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1705:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1716:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, bool&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, bool& b) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1716:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1727:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, XmlRpc::XmlRpcValue&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, XmlRpc::XmlRpcValue& v) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1727:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1739:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<std::__cxx11::basic_string<char> >&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<std::string>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1739:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1750:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<double>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<double>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1750:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1761:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<float>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<float>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1761:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1772:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<int>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<int>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1772:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1783:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<bool>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<bool>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1783:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1795:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, std::string>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1795:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1806:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, double>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, double>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1806:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1817:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, float>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, float>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1817:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1828:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, int>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, int>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1828:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1839:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, bool>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, bool>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1839:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/home/pratyush/suas_ws/src/SUAS2022/suas_trajectory_estimation/trajectory_generation/src/dubins_trajectory.cpp:22:51:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kros::NodeHandle::getParam(const char [6], Eigen::DenseCoeffsBase<Eigen::Matrix<double, 3, 1>, 1>::Scalar&, double)[m[Kâ€™
     nh_private.getParam("y_way", end_pos_.y(), 0.0[01;31m[K)[m[K;
                                                   [01;31m[K^[m[K
In file included from [01m[K/opt/ros/melodic/include/ros/ros.h:45:0[m[K,
                 from [01m[K/home/pratyush/Desktop/traj_gen/src/mav_comm/mav_msgs/include/mav_msgs/conversions.h:32[m[K,
                 from [01m[K/home/pratyush/suas_ws/src/SUAS2022/suas_trajectory_estimation/trajectory_generation/include/trajectory_generation/dubins_trajectory.hpp:6[m[K,
                 from [01m[K/home/pratyush/suas_ws/src/SUAS2022/suas_trajectory_estimation/trajectory_generation/src/dubins_trajectory.cpp:1[m[K:
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1672:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::__cxx11::string&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::string& s) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1672:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1683:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, double&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, double& d) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1683:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1694:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, float&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, float& f) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1694:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1705:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, int&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, int& i) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1705:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1716:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, bool&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, bool& b) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1716:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1727:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, XmlRpc::XmlRpcValue&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, XmlRpc::XmlRpcValue& v) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1727:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1739:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<std::__cxx11::basic_string<char> >&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<std::string>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1739:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1750:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<double>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<double>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1750:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1761:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<float>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<float>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1761:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1772:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<int>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<int>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1772:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1783:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<bool>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<bool>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1783:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1795:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, std::string>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1795:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1806:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, double>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, double>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1806:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1817:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, float>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, float>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1817:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1828:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, int>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, int>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1828:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1839:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, bool>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, bool>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1839:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/home/pratyush/suas_ws/src/SUAS2022/suas_trajectory_estimation/trajectory_generation/src/dubins_trajectory.cpp:23:51:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kros::NodeHandle::getParam(const char [6], Eigen::DenseCoeffsBase<Eigen::Matrix<double, 3, 1>, 1>::Scalar&, double)[m[Kâ€™
     nh_private.getParam("z_way", end_pos_.z(), 0.0[01;31m[K)[m[K;
                                                   [01;31m[K^[m[K
In file included from [01m[K/opt/ros/melodic/include/ros/ros.h:45:0[m[K,
                 from [01m[K/home/pratyush/Desktop/traj_gen/src/mav_comm/mav_msgs/include/mav_msgs/conversions.h:32[m[K,
                 from [01m[K/home/pratyush/suas_ws/src/SUAS2022/suas_trajectory_estimation/trajectory_generation/include/trajectory_generation/dubins_trajectory.hpp:6[m[K,
                 from [01m[K/home/pratyush/suas_ws/src/SUAS2022/suas_trajectory_estimation/trajectory_generation/src/dubins_trajectory.cpp:1[m[K:
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1672:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::__cxx11::string&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::string& s) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1672:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1683:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, double&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, double& d) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1683:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1694:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, float&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, float& f) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1694:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1705:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, int&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, int& i) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1705:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1716:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, bool&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, bool& b) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1716:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1727:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, XmlRpc::XmlRpcValue&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, XmlRpc::XmlRpcValue& v) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1727:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1739:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<std::__cxx11::basic_string<char> >&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<std::string>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1739:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1750:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<double>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<double>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1750:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1761:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<float>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<float>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1761:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1772:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<int>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<int>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1772:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1783:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::vector<bool>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::vector<bool>& vec) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1783:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1795:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, std::string>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1795:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1806:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, double>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, double>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1806:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1817:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, float>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, float>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1817:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1828:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, int>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, int>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1828:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1839:8:[m[K [01;36m[Knote: [m[Kcandidate: bool ros::NodeHandle::getParam(const string&, std::map<std::__cxx11::basic_string<char>, bool>&) const
   bool [01;36m[KgetParam[m[K(const std::string& key, std::map<std::string, bool>& map) const;
        [01;36m[K^~~~~~~~[m[K
[01m[K/opt/ros/melodic/include/ros/node_handle.h:1839:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
CMakeFiles/trajectory_generation.dir/build.make:62: recipe for target 'CMakeFiles/trajectory_generation.dir/src/dubins_trajectory.cpp.o' failed
make[2]: *** [CMakeFiles/trajectory_generation.dir/src/dubins_trajectory.cpp.o] Error 1
CMakeFiles/Makefile2:203: recipe for target 'CMakeFiles/trajectory_generation.dir/all' failed
make[1]: *** [CMakeFiles/trajectory_generation.dir/all] Error 2
Makefile:140: recipe for target 'all' failed
make: *** [all] Error 2
